strict digraph  {
conv2d [associated_ip_node_keys="{'POST HOOK conv2d', 'PRE HOOK 0 conv2d'}", node_type="InsertionPointGraphNodeType.OPERATOR", op_meta=None, regular_node_ref="{'op_exec_context': <nncf.dynamic_graph.graph.OperationExecutionContext object at 0x7fa45b90c2d0>}"];
batch_norm [associated_ip_node_keys="{'POST HOOK batch_norm', 'PRE HOOK 0 batch_norm'}", node_type="InsertionPointGraphNodeType.OPERATOR", op_meta=None, regular_node_ref="{'op_exec_context': <nncf.dynamic_graph.graph.OperationExecutionContext object at 0x7fa45b90c5d0>}"];
relu [associated_ip_node_keys="{'PRE HOOK 0 relu', 'POST HOOK relu'}", node_type="InsertionPointGraphNodeType.OPERATOR", op_meta=None, regular_node_ref="{'op_exec_context': <nncf.dynamic_graph.graph.OperationExecutionContext object at 0x7fa45b90c890>}"];
A [associated_ip_node_keys="{'POST HOOK A'}", node_type="InsertionPointGraphNodeType.OPERATOR", op_meta=None, regular_node_ref="{'op_exec_context': <nncf.dynamic_graph.graph.OperationExecutionContext object at 0x7fa45b90cb50>}"];
B [associated_ip_node_keys="{'PRE HOOK 0 B', 'POST HOOK B'}", node_type="InsertionPointGraphNodeType.OPERATOR", op_meta=None, regular_node_ref="{'op_exec_context': <nncf.dynamic_graph.graph.OperationExecutionContext object at 0x7fa45b90ce10>}"];
C [associated_ip_node_keys="{'POST HOOK C', 'PRE HOOK 0 C'}", node_type="InsertionPointGraphNodeType.OPERATOR", op_meta=None, regular_node_ref="{'op_exec_context': <nncf.dynamic_graph.graph.OperationExecutionContext object at 0x7fa45b45f110>}"];
D [associated_ip_node_keys="{'POST HOOK D', 'PRE HOOK 0 D'}", node_type="InsertionPointGraphNodeType.OPERATOR", op_meta=None, regular_node_ref="{'op_exec_context': <nncf.dynamic_graph.graph.OperationExecutionContext object at 0x7fa45b45f3d0>}"];
"PRE HOOK 0 conv2d" [insertion_point_data="TargetType.OPERATOR_PRE_HOOK 0 /conv2d_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"POST HOOK conv2d" [insertion_point_data="TargetType.OPERATOR_POST_HOOK /conv2d_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"PRE HOOK 0 batch_norm" [insertion_point_data="TargetType.OPERATOR_PRE_HOOK 0 /batch_norm_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"POST HOOK batch_norm" [insertion_point_data="TargetType.OPERATOR_POST_HOOK /batch_norm_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"PRE HOOK 0 relu" [insertion_point_data="TargetType.OPERATOR_PRE_HOOK 0 /relu_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"POST HOOK relu" [insertion_point_data="TargetType.OPERATOR_POST_HOOK /relu_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"POST HOOK A" [insertion_point_data="TargetType.OPERATOR_POST_HOOK /A_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"PRE HOOK 0 B" [insertion_point_data="TargetType.OPERATOR_PRE_HOOK 0 /B_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"POST HOOK B" [insertion_point_data="TargetType.OPERATOR_POST_HOOK /B_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"PRE HOOK 0 C" [insertion_point_data="TargetType.OPERATOR_PRE_HOOK 0 /C_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"POST HOOK C" [insertion_point_data="TargetType.OPERATOR_POST_HOOK /C_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"PRE HOOK 0 D" [insertion_point_data="TargetType.OPERATOR_PRE_HOOK 0 /D_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
"POST HOOK D" [insertion_point_data="TargetType.OPERATOR_POST_HOOK /D_0", node_type="InsertionPointGraphNodeType.INSERTION_POINT"];
conv2d -> "POST HOOK conv2d";
batch_norm -> "POST HOOK batch_norm";
relu -> "POST HOOK relu";
A -> "POST HOOK A";
B -> "POST HOOK B";
C -> "POST HOOK C";
D -> "POST HOOK D";
"PRE HOOK 0 conv2d" -> conv2d;
"POST HOOK conv2d" -> "PRE HOOK 0 C";
"PRE HOOK 0 batch_norm" -> batch_norm;
"POST HOOK batch_norm" -> "PRE HOOK 0 D";
"PRE HOOK 0 relu" -> relu;
"POST HOOK relu" -> "PRE HOOK 0 B";
"POST HOOK A" -> "PRE HOOK 0 conv2d";
"PRE HOOK 0 B" -> B;
"PRE HOOK 0 C" -> C;
"POST HOOK C" -> "PRE HOOK 0 batch_norm";
"PRE HOOK 0 D" -> D;
"POST HOOK D" -> "PRE HOOK 0 relu";
}
